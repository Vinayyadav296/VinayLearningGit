Spring Framework==>It was developed by Rod Johnson in 2003. Spring framework makes the easy development of JavaEE application.
Spring is a lightweight framework. It can be thought of as a framework of frameworks because it provides support to various frameworks such as Struts, Hibernate, Tapestry, EJB, JSF, etc. The framework, in broader sense, can be defined as a structure where we find solution of the various technical problems.

The Spring framework comprises several modules such as IOC, AOP, DAO, Context, ORM, WEB MVC etc.

Inversion Of Control (IOC) and Dependency Injection==>
These are the design patterns that are used to remove dependency from the programming code. They make the code easier to test and maintain. Let's understand this with the following code:

class Employee{  
Address address;  
Employee(){  
address=new Address();  
}  
}  
In such case, there is dependency between the Employee and Address (tight coupling). In the Inversion of Control scenario, we do this something like this:

class Employee{  
Address address;  
Employee(Address address){  
this.address=address;  
}  
}  
Thus, IOC makes the code loosely coupled. In such case, there is no need to modify the code if our logic is moved to new environment.

In Spring framework, IOC container is responsible to inject the dependency. We provide metadata to the IOC container either by XML file or annotation.

Advantage of Dependency Injection==>
makes the code loosely coupled so easy to maintain
makes the code easy to test

Spring Modules==The Spring framework comprises of many modules such as core, beans, context, expression language, AOP, Aspects, Instrumentation, JDBC, ORM, OXM, JMS, Transaction, Web, Servlet, Struts etc. These modules are grouped into Test, Core Container, AOP, Aspects, Instrumentation, Data Access / Integration, Web (MVC / Remoting) as displayed in the following diagram.for diagram open the url given below

https://www.javatpoint.com/spring-modules

Test
This layer provides support of testing with JUnit and TestNG.

Spring Core Container
The Spring Core container contains core, beans, context and expression language (EL) modules.

Core and Beans
These modules provide IOC and Dependency Injection features.

Context
This module supports internationalization (I18N), EJB, JMS, Basic Remoting.

Expression Language
It is an extension to the EL defined in JSP. It provides support to setting and getting property values, method invocation, accessing collections and indexers, named variables, logical and arithmetic operators, retrieval of objects by name etc.

AOP, Aspects and Instrumentation
These modules support aspect oriented programming implementation where you can use Advices, Pointcuts etc. to decouple the code.

The aspects module provides support to integration with AspectJ.

The instrumentation module provides support to class instrumentation and classloader implementations.

Data Access / Integration
This group comprises of JDBC, ORM, OXM, JMS and Transaction modules. These modules basically provide support to interact with the database.

Web
This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. These modules provide support to create web application.

IoC Container
Using BeanFactory
Using ApplicationContext

IoC Container=>
The IoC container is responsible to instantiate, configure and assemble the objects. The IoC container gets informations from the XML file and works accordingly. The main tasks performed by IoC container are:

to instantiate the application class
to configure the object
to assemble the dependencies between the objects

There are two types of IoC containers. They are:

BeanFactory
ApplicationContext

Dependency injection can be done in two ways+>
1.Using setter injection
2.Using constructor injection.

Difference between BeanFactory and the ApplicationContext
The org.springframework.beans.factory.BeanFactory and the org.springframework.context.ApplicationContext interfaces acts as the IoC container. The ApplicationContext interface is built on top of the BeanFactory interface. It adds some extra functionality than BeanFactory such as simple integration with Spring's AOP, message resource handling (for I18N), event propagation, application layer specific context (e.g. WebApplicationContext) for web application. So it is better to use ApplicationContext than BeanFactory.

Using BeanFactory==>
The XmlBeanFactory is the implementation class for the BeanFactory interface. To use the BeanFactory, we need to create the instance of XmlBeanFactory class as given below:

Resource resource=new ClassPathResource("applicationContext.xml");  
BeanFactory factory=new XmlBeanFactory(resource);  

The constructor of XmlBeanFactory class receives the Resource object so we need to pass the resource object to create the object of BeanFactory.

Using ApplicationContext=>
The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext interface. We need to instantiate the ClassPathXmlApplicationContext class to use the ApplicationContext as given below:

ApplicationContext context =   
    new ClassPathXmlApplicationContext("applicationContext.xml");  
The constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file to create the instance of ApplicationContext.

Dependency Injection in Spring>
Dependency Injection (DI) is a design pattern that removes the dependency from the programming code so that it can be easy to manage and test the application. Dependency Injection makes our programming code loosely coupled.In such case we provide the information from the external source such as XML file.

Dependency Lookup
The Dependency Lookup is an approach where we get the resource after demand.

There are mainly two problems of dependency lookup==>

tight coupling The dependency lookup approach makes the code tightly coupled. If resource is changed, we need to perform a lot of modification in the code.
Not easy for testing This approach creates a lot of problems while testing the application especially in black box testing.


LifeCycle Methods==>Spring provide two important methods to every bean

public void init()  ==>used for initialization code loading config ,connecting db,webservices.
public void destroy()=> we can use to write the clean up code.

we can change the name of both two but signature should be  same

implmenting bean lifecycle from interfaces 
implementing bean lifecyclen using annotattions ==postconstruct provide init fucntionality
and predestroy provide destroy funcitonality

Autowiring in spring==>feature of spring framework in which spring container inject the dependencies automatically
autowiring can't be used to inject the primitive and String values. it works with refrence only .ie with objects only

auotwiring can be done by using two modes ==>
1.xml==>it has autowiring modes
if u do not use any in bean tag then by default mode is no means autowiring not enabled
byName==> to search the bean with that name and autowiring injext dependencies and in this case we have to provide the same name in dependent class reference variable for example Address class ref var address
byType==>with the type

	<bean class="com.springcore.auto.wire.Address" name="address1"> <!-- here the name should be same as mentioned Address class which is address otherwise we will get null no autowiring done -->
		<property name="street" value="dalal"/>
        <property name="city"  value="mumbai"/>	
	</bean>
	<bean class="com.springcore.auto.wire.Address" name="address2"> <!-- here the name should be same as mentioned Address class which is address otherwise we will get null no autowiring done -->
		<property name="street" value="dalal"/>
        <property name="city"  value="mumbai"/>	
	</bean>
if we provide the the two address in which are of type address then in that case it will give error of expecting one but found two
constructor
autodetect=> it is depreccated in spring 

2.annotations=>@Autowired annotation is used for autowiring this is used more frequently
it can be used in three ways 
a-->first above in properties field for example above private String address in emp
b--> second above in setter method
c--> third above in parametrized constructor

we can use @Qualifier annotations with @Autowired in order to inject any specific dependencies
	@Autowired
	@Qualifier("address1")

Autowiring advantages==>
it is automatic
less code is to be written

disadvantages==>
No control of the programer
It cant be used for primitive and string values
