A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.
A class in Java can contain:
Fields
Methods
Constructors
Blocks
Nested class and interface

An object is an instance of a class. A class is a template or blueprint from which objects are created. So, an object is the instance(result) of a class.
Object Definitions:

An object is a real-world entity.
An object is a runtime entity.
The object is an entity which has state and behavior.
The object is an instance of a class.

Ways to intialize an object.---



Instance variable in Java--A variable which is created inside the class but outside the method is known as an instance variable. Instance variable doesn't get memory at compile time. It gets memory at runtime when an object or instance is created. That is why it is known as an instance variable.

The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.

What is a method in Java?
A method is a block of code or collection of statements or a set of code grouped together to perform a certain task or operation. It is used to achieve the reusability of code. We write a method once and use it many times.

Constructors in Java--It is a special type of method which is used to initialize the object.It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory.

Rules for creating Java constructor--
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized

What is the purpose of a default constructor?
The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.
// default constructor --

public class JavaConstructor {
    int id;
    String name;

    public void display() {
        System.out.println(id + " " + name);
    }

    public static void main(String[] args) {
        JavaConstructor s1 = new JavaConstructor();
        JavaConstructor s2 = new JavaConstructor();
        s1.display();
        s2.display();
    }
}

Java Parameterized Constructor--A constructor which has a specific number of parameters is called a parameterized constructor.
Why use the parameterized constructor?
The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.

//Parametrized constructors

public class ParametrizedConstrutor {
    int id;
    String name;

    ParametrizedConstrutor(int id, String name) {
        this.id = id;
        this.name = name;
    }

    void display() {
        System.out.println(id + " " + name);
    }

    public static void main(String[] args) {
        ParametrizedConstrutor s1 = new ParametrizedConstrutor(14, "Vinay");
        ParametrizedConstrutor s2 = new ParametrizedConstrutor(89, "Vikas");
        s1.display();
        s2.display();
    }
}


Constructor Overloading in Java--
Constructor overloading in Java is a technique of having more than one constructor with different parameter lists. They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types.

// ConstructorOverloading

public class ConstructorOverloading {
    int id;
    String name;
    int age;

    ConstructorOverloading(int id, String name) {
        this.id = id;
        this.name = name;
    }

    ConstructorOverloading(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    void display() {
        System.out.println(id + " " + name + " " + age);
    }

    public static void main(String[] args) {
        ConstructorOverloading s1 = new ConstructorOverloading(54, "Vinay");
        ConstructorOverloading s2 = new ConstructorOverloading(89, "Vikas", 25);
        s1.display();
        s2.display();
    }
}


//Copy Constructor

public class CopyObjectValues {
    int id;
    String name;

    CopyObjectValues(int id, String name) {
        this.id = id;
        this.name = name;
    }

    CopyObjectValues() {
    }; // empty constructor

    void print() {
        System.out.println(id + " " + name);
    }

    public static void main(String[] args) {
        CopyObjectValues s1 = new CopyObjectValues(82, "Vinay yada");
        CopyObjectValues s2 = new CopyObjectValues();
        s2.id = s1.id;
        s2.name = s1.name;
        s1.print();
        s2.print();

    }
}


Java static keyword--The static keyword in Java is used for memory management mainly. We can apply static keyword with variables, methods, blocks and nested classes. The static keyword belongs to the class than an instance of the class.
The static can be:
Variable (also known as a class variable)
Method (also known as a class method)
Block
Nested class

Java static method--If you apply static keyword with any method, it is known as static method.
A static method belongs to the class rather than the object of a class.
A static method can be invoked without the need for creating an instance of a class.
A static method can access static data member and can change the value of it.

///StaticKeyword

public class StaticDemo {
    int id;
    String name;
    static String college = "Rkgit"; // making this keyword static because it will be same for all the student of
    // that college

    // here we could have used static method to change the static data member i.e
    // college
    static void change() {
        college = "ABES";
    }

    StaticDemo(int id, String name) {
        this.id = id;
        this.name = name;
    }

    void display() {
        System.out.println(id + " " + name + " " + college);
    }

    public static void main(String[] args) {
        StaticDemo s1 = new StaticDemo(547, "Vinay"); // here we are not providing college value beacause it is static
                                                      // and we can directly use it
        StaticDemo s2 = new StaticDemo(547, "Vikas");
        // StaticDemo.change(); // calling this static method to change the value of
        // static data memeber
        // suppose if you want to change the name of the college then in that case
        // StaticDemo.college = "ABES"; // here using s1 will throw an error
        s1.display();
        s2.display();

    }
}


Q) Why is the Java main method static?
Ans) It is because the object is not required to call a static method. If it were a non-static method, JVM creates an object first then call main() method that will lead the problem of extra memory allocation.

Java static block
Is used to initialize the static data member.
It is executed before the main method at the time of classloading.

this keyword in Java--There can be a lot of usage of Java this keyword. In Java, this is a reference variable that refers to the current object.
Usage of Java this keyword--
this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

public class ThisKeyword {
    // void m() {
    // System.out.println("hello m");
    // }

    // void n() {
    // System.out.println("hello n");
    // this.m(); // second usage of this Keyword--calling current class method using
    // this keyword
    // }

    // ThisKeyword() {
    // System.out.println("hello");
    // }

    // ThisKeyword(int x) {
    // this();// Calling default constructor from parameterized constructor:
    // System.out.print(x);
    // }

    ThisKeyword() {
        this(5); // Calling Parametrized constructor from default constructor:

        System.out.println("hello");
    }

    ThisKeyword(int x) {
        System.out.print(x);
    }

    public static void main(String[] args) {
        // ThisKeyword obj = new ThisKeyword();
        // obj.n();
        // ThisKeyword obj1 = new ThisKeyword(55);

        // real use of this keyword
        // class Student{
        // int rollno;
        // String name,course;
        // float fee;
        // Student(int rollno,String name,String course){
        // this.rollno=rollno;
        // this.name=name;
        // this.course=course;
        // }
        // Student(int rollno,String name,String course,float fee){
        // this(rollno,name,course);//reusing constructor
        // this.fee=fee;
        // }
        // void display(){System.out.println(rollno+" "+name+" "+course+" "+fee);}
        // }
        // class TestThis7{
        // public static void main(String args[]){
        // Student s1=new Student(111,"ankit","java");
        // Student s2=new Student(112,"sumit","java",6000f);
        // s1.display();
        // s2.display();
        // }}

    }
}

Inheritance in Java--Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.
Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

Why use inheritance in java
For Method Overriding (so runtime polymorphism can be achieved).
For Code Reusability.

Terms used in Inheritance
Class: A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.
Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class.
Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.
Reusability: As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class.

Types of inheritance in java
On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.

In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later.Multiple inheritance is not supported in Java through class.

Single Inheritance Example
When a class inherits another class, it is known as a single inheritance. In the example given below, Dog class inherits the Animal class, so there is the single inheritance.

public class SingleInheritance {
    void eat() {
        System.out.println("eating....");
    }
}

class Dog extends SingleInheritance {
    void bark() {
        System.out.println("Dog is barking");
    }

    public static void main(String[] args) {
        Dog d = new Dog();
        d.eat();
        d.bark();
    }
}


Multilevel Inheritance Example
When there is a chain of inheritance, it is known as multilevel inheritance.s you can see in the example given below, BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.
public class MutileveInheritance {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends MutileveInheritance {
    void bark() {
        System.out.println("barking...");
    }
}

class BabyDog extends Dog {
    void weep() {
        System.out.println("weeping...");
    }
}

class TestInheritance2 {
    public static void main(String args[]) {
        BabyDog d = new BabyDog();
        d.weep();
        d.bark();
        d.eat();
    }
}

Hierarchical Inheritance Example
When two or more classes inherits a single class, it is known as hierarchical inheritance. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.
public class HierachialInheritance {
    void eat() {
        System.out.println("eating...");
    }
}

class Dog extends HierachialInheritance {
    void bark() {
        System.out.println("barking...");
    }
}

class Cat extends HierachialInheritance {
    void meow() {
        System.out.println("meowing...");
    }
}

class TestInheritance3 {
    public static void main(String args[]) {
        Cat c = new Cat();
        c.meow();
        c.eat();
        // c.bark();//C.T.Error
    }
}


Aggregation(Has-A)relationship--When use Aggregation?
Code reuse is also best achieved by aggregation when there is no is-a relationship.
Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.

Method Overloading in Java--If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.
Advantage of method overloading
Method overloading increases the readability of the program.

There are two ways to overload the method in java

By changing number of arguments
By changing the data type
In Java, Method Overloading is not possible by changing the return type of the method only.

Q) Why Method Overloading is not possible by changing the return type of method only?
In java, method overloading is not possible by changing the return type of the method only because of ambiguity. Let's see how ambiguity may occur:

class Adder{  
static int add(int a,int b){return a+b;}  
static double add(int a,int b){return a+b;}  
}  
class TestOverloading3{  
public static void main(String[] args){  
System.out.println(Adder.add(11,11));//ambiguity  
}}  
Output:
Compile Time Error: method add(int,int) is already defined in class Adder

Method Overriding in Java--If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.

Usage of Java Method Overriding
Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
Method overriding is used for runtime polymorphism

Rules for Java Method Overriding
The method must have the same name as in the parent class
The method must have the same parameter as in the parent class.
There must be an IS-A relationship (inheritance).

Can we override static method?
No, a static method cannot be overridden. It can be proved by runtime polymorphism, so we will learn it later.

Why can we not override static method?
It is because the static method is bound with class whereas instance method is bound with an object. Static belongs to the class area, and an instance belongs to the heap area.

Can we override java main method?
No, because the main is a static method.

Super Keyword in Java
The super keyword in Java is a reference variable which is used to refer immediate parent class object.
Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.

Usage of Java super Keyword
super can be used to refer immediate parent class instance variable.
super can be used to invoke immediate parent class method.
super() can be used to invoke immediate parent class constructor.

Instance initializer block--Instance Initializer block is used to initialize the instance data member.
The initialization of the instance variable can be done directly but there can be performed extra operations while initializing the instance variable in the instance initializer block.

   What is invoked first, instance initializer block or constructor?

class Bike8{  
    int speed;  
   Bike8(){System.out.println("constructor is invoked");}  
   
    {System.out.println("instance initializer block invoked");}  
       
    public static void main(String args[]){  
    Bike8 b1=new Bike8();  
    Bike8 b2=new Bike8();  
    }      
}  
Output:instance initializer block invoked
       constructor is invoked
       instance initializer block invoked
       constructor is invoked

Final Keyword--Stops value change,Stops method overriding and stops inheritance

The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:

variable
method
class

The final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only. We will have detailed learning of these. Let's first learn the basics of final keyword.

Example--There is a final variable speedlimit, we are going to change the value of this variable, but It can't be changed because final variable once assigned a value can never be changed.

class Bike9{  
 final int speedlimit=90;//final variable  
 void run(){  
  speedlimit=400;  
 }  
 public static void main(String args[]){  
 Bike9 obj=new  Bike9();  
 obj.run();  
 }  
}//
Output:Compile Time Error

Java final method--
If you make any method as final, you cannot override it.

Example of final method
class Bike{  
  final void run(){System.out.println("running");}  
}  
     
class Honda extends Bike{  
   void run(){System.out.println("running safely with 100kmph");}  
     
   public static void main(String args[]){  
   Honda honda= new Honda();  
   honda.run();  
   }  
}  
Output:Compile Time Error

Java final class--If you make any class as final, you cannot extend it.

Example of final class--
final class Bike{}  
  
class Honda1 extends Bike{  
  void run(){System.out.println("running safely with 100kmph");}  
    
  public static void main(String args[]){  
  Honda1 honda= new Honda1();  
  honda.run();  
  }  
}  
Output:Compile Time Error

Q) Is final method inherited?
Ans) Yes, final method is inherited but you cannot override it. For Example:

class Bike{  
  final void run(){System.out.println("running...");}  
}  
class Honda2 extends Bike{  
   public static void main(String args[]){  
    new Honda2().run();  
   }  
}  
Output:running...

Polymorphism in Java--
Polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word "poly" means many and "morphs" means forms. So polymorphism means many forms.

There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.

If you overload a  method in Java, it is the example of compile time polymorphism. Here, we will focus on runtime polymorphism in java.

Runtime Polymorphism in Java--Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

In this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable.

Let's first understand the upcasting before Runtime Polymorphism.

Upcasting
If the reference variable of Parent class refers to the object of Child class, it is known as upcasting. For example:

Upcasting in Java--
class A{}  
class B extends A{}  
A a=new B();//upcasting  
For upcasting, we can use the reference variable of class type or an interface type. For Example:

interface I{}  
class A{}  
class B extends A implements I{}  
Here, the relationship of B class would be:

B IS-A A
B IS-A I
B IS-A Object
Since Object is the root class of all classes in Java, so we can write B IS-A Object.

Java Runtime Polymorphism Example: Shape->

class Shape{  
void draw(){System.out.println("drawing...");}  
}  
class Rectangle extends Shape{  
void draw(){System.out.println("drawing rectangle...");}  
}  
class Circle extends Shape{  
void draw(){System.out.println("drawing circle...");}  
}  
class Triangle extends Shape{  
void draw(){System.out.println("drawing triangle...");}  
}  
class TestPolymorphism2{  
public static void main(String args[]){  
Shape s;  
s=new Rectangle();  
s.draw();  
s=new Circle();  
s.draw();  
s=new Triangle();  
s.draw();  
}  
}  
Output:

drawing rectangle...
drawing circle...
drawing triangle...

Before learning the Java abstract class, let's understand the abstraction in Java first.

Abstraction in Java
Abstraction is a process of hiding the implementation details and showing only functionality to the user.

Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery.

Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java

Abstract class (0 to 100%)
Interface (100%)

Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

Points to Remember
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.

Abstract Method in Java--
A method which is declared as abstract and does not have implementation is known as an abstract method.

abstract class Bike{  
  abstract void run();  
}  
class Honda4 extends Bike{  
void run(){System.out.println("running safely");}  
public static void main(String args[]){  
 Bike obj = new Honda4();  
 obj.run();  
}  
}  

Abstract class having constructor, data member and methods
An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.

File: TestAbstraction2.java

//Example of an abstract class that has abstract and non-abstract methods  
 abstract class Bike{  
   Bike(){System.out.println("bike is created");}  
   abstract void run();  
   void changeGear(){System.out.println("gear changed");}  
 }  
//Creating a Child class which inherits Abstract class  
 class Honda extends Bike{  
 void run(){System.out.println("running safely..");}  
 }  
//Creating a Test class which calls abstract and non-abstract methods  
 class TestAbstraction2{  
 public static void main(String args[]){  
  Bike obj = new Honda();  
  obj.run();  
  obj.changeGear();  
 }  
}  

Interface in Java--An interface in Java is a blueprint of a class. It has static constants and abstract methods.

The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.
Java Interface also represents the IS-A relationship.

It cannot be instantiated just like the abstract class.
Since Java 8, we can have default and static methods in an interface.
Since Java 9, we can have private methods in an interface.

How to declare an interface?
Syntax:
interface <interface_name>{  
      
    // declare constant fields  
    // declare methods that abstract   
    // by default.  
}  

The relationship between classes and interfaces--a class extends another class, an interface extends another interface, but a class implements an interface.

Java Interface Example
In this example, the Printable interface has only one method, and its implementation is provided in the A6 class.

interface printable{  
void print();  
}  
class A6 implements printable{  
public void print(){System.out.println("Hello");}  
  
public static void main(String args[]){  
A6 obj = new A6();  
obj.print();  
 }  
}  

Multiple inheritance in Java by interface
If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance.
interface Printable{  
void print();  
}  
interface Showable{  
void show();  
}  
class A7 implements Printable,Showable{  
public void print(){System.out.println("Hello");}  
public void show(){System.out.println("Welcome");}  
  
public static void main(String args[]){  
A7 obj = new A7();  
obj.print();  
obj.show();  
 }  
}  

Abstract class	Interface
1) Abstract class can have abstract and non-abstract methods.   --	Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
2) Abstract class doesn't support multiple inheritance.   --	Interface supports multiple inheritance.
3) Abstract class can have final, non-final, static and non-static variables.   --	Interface has only static and final variables.
4) Abstract class can provide the implementation of interface.  --	Interface can't provide the implementation of abstract class.
5) The abstract keyword is used to declare abstract class. --	The interface keyword is used to declare interface.
6) An abstract class can extend another Java class and implement multiple Java interfaces.    --	An interface can extend another Java interface only.
7) An abstract class can be extended using keyword "extends".   --	An interface can be implemented using keyword "implements".
8) A Java abstract class can have class members like private, protected, etc.  --	Members of a Java interface are public by  
9)Example:                                                                                                                         	Example:
public interface Drawable{
void draw();

public abstract class Shape{
public abstract void draw();
}

There are two types of modifiers in Java: access modifiers and non-access modifiers.

The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.

There are four types of Java access modifiers:

Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.
Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.

Encapsulation in Java
Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.

encapsulation in java
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.

The Java Bean class is the example of a fully encapsulated clas

Advantage of Encapsulation in Java
By providing only a setter or getter method, you can make the class read-only or write-only. In other words, you can skip the getter or setter methods.

It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in the setter methods.

It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members.

The encapsulate class is easy to test. So, it is better for unit testing.
Let's see another example of encapsulation that has only four fields with its setter and getter methods.

File: Account.java

//A Account class which is a fully encapsulated class.  
//It has a private data member and getter and setter methods.  
class Account {  
//private data members  
private long acc_no;  
private String name,email;  
private float amount;  
//public getter and setter methods  
public long getAcc_no() {  
    return acc_no;  
}  
public void setAcc_no(long acc_no) {  
    this.acc_no = acc_no;  
}  
public String getName() {  
    return name;  
}  
public void setName(String name) {  
    this.name = name;  
}  
public String getEmail() {  
    return email;  
}  
public void setEmail(String email) {  
    this.email = email;  
}  
public float getAmount() {  
    return amount;  
}  
public void setAmount(float amount) {  
    this.amount = amount;  
}  
  
}  
File: TestAccount.java

//A Java class to test the encapsulated class Account.  
public class TestEncapsulation {  
public static void main(String[] args) {  
    //creating instance of Account class  
    Account acc=new Account();  
    //setting values through setter methods  
    acc.setAcc_no(7560504000L);  
    acc.setName("Sonoo Jaiswal");  
    acc.setEmail("sonoojaiswal@javatpoint.com");  
    acc.setAmount(500000f);  
    //getting values through getter methods  
    System.out.println(acc.getAcc_no()+" "+acc.getName()+" "+acc.getEmail()+" "+acc.getAmount());  
}  
}  

//how to create custom exception...


class AgeInvalidException extends Exception
{

	AgeInvalidException()
	{
		super("Age is invalid !");
	}

	AgeInvalidException(String message)
	{
		super(message);
	}

}




class Example
{
	public static void main(String[] args) {
		System.out.println("Started...");//starting ...


		try
		{
			int n1=Integer.parseInt(args[0]);
			int n2=Integer.parseInt(args[1]);
			System.out.println("We have got two numbers..");
			int result=n1/n2;
			System.out.println("Division is "+result);

			if(n2<10)
			{
				throw new AgeInvalidException("My age is invalid !!");
			}

		}
		catch(ArithmeticException e)
		{
			System.out.println("n2 can not be 0 !!");
			System.out.println(e.getMessage());	
		}
		catch (NumberFormatException e) {
			System.out.println("Invalid Numbers !!");
			System.out.println(e.getMessage());	
		}
		catch (AgeInvalidException e) {
			System.out.println("Invalid N2");
			System.out.println(e.getMessage());
		}
		catch (Exception e) {
			System.out.println("Error !!");
			System.out.println(e.getMessage());
		}
		finally
		{
			//always gets executed ..
			System.out.println("i am in finally block");
			System.out.println("closing all the resources...");
		}

		//100

		System.out.println("Terminated..");//ending point
	}
}

throws
Checked vs Unchecked 
...



